import React, { useState, useMemo } from "react";
// Single-file React component for a simple Customer Support Ticketing website.
// - Tailwind CSS utility classes are used for styling (no imports required here).
// - shadcn/ui components are referenced in comments and may be swapped for regular HTML if not available.
// - Framer Motion is used for small animations (optional).
// Usage: drop this file into a React app that has Tailwind configured and run.

import { motion } from "framer-motion";
// Example shadcn imports (uncomment if you have shadcn installed)
// import { Card, CardContent } from "@/components/ui/card";
// import { Button } from "@/components/ui/button";
// import { Input } from "@/components/ui/input";

// --- Sample ticket data ---
const SAMPLE_TICKETS = [
  {
    id: "TCK-1001",
    subject: "Unable to login to account",
    description: "Customer reports " +
      "invalid credentials even after password reset.",
    priority: "High",
    status: "Open",
    assignee: "Unassigned",
    createdAt: "2025-10-24",
  },
  {
    id: "TCK-1002",
    subject: "Billing discrepancy on invoice #457",
    description: "Customer was charged twice for October invoice.",
    priority: "Medium",
    status: "In Progress",
    assignee: "Aishwarya",
    createdAt: "2025-10-23",
  },
];

function generateId(existing = []) {
  const n = Math.floor(Math.random() * 9000) + 1000;
  const id = `TCK-${n}`;
  return existing.find((t) => t.id === id) ? generateId(existing) : id;
}

export default function SupportTicketingWebsite() {
  const [tickets, setTickets] = useState(SAMPLE_TICKETS);
  const [view, setView] = useState("list"); // list | create | detail | flow
  const [selectedId, setSelectedId] = useState(null);

  // Form state
  const [subject, setSubject] = useState("");
  const [description, setDescription] = useState("");
  const [priority, setPriority] = useState("Low");

  const selectedTicket = useMemo(
    () => tickets.find((t) => t.id === selectedId) || null,
    [tickets, selectedId]
  );

  function createTicket(e) {
    e && e.preventDefault();
    const id = generateId(tickets);
    const newTicket = {
      id,
      subject: subject || "(no subject)",
      description: description || "",
      priority,
      status: "Open",
      assignee: "Unassigned",
      createdAt: new Date().toISOString().slice(0, 10),
    };
    setTickets((s) => [newTicket, ...s]);
    // reset
    setSubject("");
    setDescription("");
    setPriority("Low");
    setView("list");
  }

  function assignTicket(id, name) {
    setTickets((s) => s.map((t) => (t.id === id ? { ...t, assignee: name } : t)));
  }

  function changeStatus(id, status) {
    setTickets((s) => s.map((t) => (t.id === id ? { ...t, status } : t)));
  }

  function deleteTicket(id) {
    setTickets((s) => s.filter((t) => t.id !== id));
    setView("list");
  }

  return (
    <div className="min-h-screen bg-slate-50 text-slate-800 p-6">
      <div className="max-w-6xl mx-auto">
        <header className="flex items-center justify-between mb-6">
          <div>
            <h1 className="text-2xl font-semibold">SupportDesk — Ticketing</h1>
            <p className="text-sm text-slate-500">Simple demo UI (static data)</p>
          </div>
          <nav className="flex gap-2">
            <button
              onClick={() => setView("flow")}
              className={`px-3 py-2 rounded-md text-sm ${view === "flow" ? "bg-slate-200" : "hover:bg-slate-100"}`}>
              Flowchart
            </button>
            <button
              onClick={() => setView("list")}
              className={`px-3 py-2 rounded-md text-sm ${view === "list" ? "bg-slate-200" : "hover:bg-slate-100"}`}>
              Tickets
            </button>
            <button
              onClick={() => setView("create")}
              className={`px-3 py-2 rounded-md text-sm ${view === "create" ? "bg-slate-200" : "hover:bg-slate-100"}`}>
              New Ticket
            </button>
          </nav>
        </header>

        <main>
          {view === "flow" && (
            <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} className="bg-white rounded-lg p-6 shadow">
              <h2 className="text-lg font-medium mb-4">Flowchart — Ticket Lifecycle</h2>

              {/* Inline SVG flowchart — easy to copy & edit */}
              <div className="overflow-auto">
                <svg viewBox="0 0 800 600" width="100%" height="400" xmlns="http://www.w3.org/2000/svg">
                  <defs>
                    <marker id="arrow" markerWidth="10" markerHeight="10" refX="8" refY="5" orient="auto">
                      <path d="M0,0 L10,5 L0,10 z" fill="#223" />
                    </marker>
                  </defs>

                  {/* Boxes */}
                  <rect x="330" y="20" rx="10" ry="10" width="140" height="44" fill="#fff" stroke="#1f2937" />
                  <text x="400" y="50" textAnchor="middle" fontSize="14" fill="#111">Start</text>

                  <rect x="120" y="100" rx="12" ry="12" width="560" height="60" fill="#fff" stroke="#1f2937" />
                  <text x="400" y="140" textAnchor="middle" fontSize="16">Customer submits issue (email/chat/form)</text>

                  <rect x="300" y="200" rx="12" ry="12" width="200" height="56" fill="#fff" stroke="#1f2937" />
                  <text x="400" y="234" textAnchor="middle" fontSize="16">Ticket Created</text>

                  <rect x="120" y="300" rx="12" ry="12" width="200" height="56" fill="#fff" stroke="#1f2937" />
                  <text x="220" y="334" textAnchor="middle" fontSize="14">Auto routing & SLA</text>

                  <rect x="480" y="300" rx="12" ry="12" width="200" height="56" fill="#fff" stroke="#1f2937" />
                  <text x="580" y="334" textAnchor="middle" fontSize="14">Agent works on ticket</text>

                  <rect x="300" y="420" rx="12" ry="12" width="200" height="56" fill="#fff" stroke="#1f2937" />
                  <text x="400" y="454" textAnchor="middle" fontSize="16">Resolved & Closed</text>

                  {/* Arrows */}
                  <line x1="400" y1="64" x2="400" y2="100" stroke="#111" strokeWidth="2" markerEnd="url(#arrow)" />
                  <line x1="400" y1="160" x2="400" y2="200" stroke="#111" strokeWidth="2" markerEnd="url(#arrow)" />
                  <line x1="300" y1="256" x2="220" y2="300" stroke="#111" strokeWidth="2" markerEnd="url(#arrow)" />
                  <line x1="500" y1="256" x2="580" y2="300" stroke="#111" strokeWidth="2" markerEnd="url(#arrow)" />
                  <line x1="220" y1="356" x2="400" y2="420" stroke="#111" strokeWidth="2" markerEnd="url(#arrow)" />
                  <line x1="580" y1="356" x2="400" y2="420" stroke="#111" strokeWidth="2" markerEnd="url(#arrow)" />
                </svg>
              </div>

              <p className="text-sm text-slate-500 mt-3">This is an editable inline SVG — copy it into design tools or modify shapes/text as needed.</p>
            </motion.div>
          )}

          {view === "list" && (
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              <aside className="md:col-span-1">
                <div className="bg-white p-4 rounded-lg shadow">
                  <h3 className="font-medium">Filters</h3>
                  <p className="text-sm text-slate-500 mt-2">Quick filters for demo</p>
                  <div className="mt-3 flex flex-col gap-2">
                    <button onClick={() => setView("create")} className="px-3 py-2 rounded bg-slate-800 text-white text-sm">Create Ticket</button>
                  </div>
                </div>
              </aside>

              <section className="md:col-span-2 space-y-4">
                <div className="flex items-center justify-between">
                  <h2 className="text-lg font-medium">Tickets</h2>
                  <p className="text-sm text-slate-500">{tickets.length} total</p>
                </div>

                <div className="space-y-3">
                  {tickets.map((t) => (
                    <motion.div key={t.id} whileHover={{ scale: 1.01 }} className="bg-white p-4 rounded-lg shadow flex items-center justify-between">
                      <div>
                        <div className="text-sm text-slate-500">{t.id} • {t.createdAt}</div>
                        <div className="font-semibold text-slate-800">{t.subject}</div>
                        <div className="text-sm text-slate-500">{t.description.slice(0, 80)}{t.description.length > 80 ? "..." : ""}</div>
                        <div className="mt-2 text-xs flex gap-2">
                          <span className="px-2 py-1 rounded-full border text-xs">{t.priority}</span>
                          <span className="px-2 py-1 rounded-full border text-xs">{t.status}</span>
                          <span className="px-2 py-1 rounded-full border text-xs">{t.assignee}</span>
                        </div>
                      </div>

                      <div className="flex flex-col items-end gap-2">
                        <div className="flex gap-2">
                          <button onClick={() => { setSelectedId(t.id); setView("detail"); }} className="px-3 py-1 rounded border text-sm">Open</button>
                          <button onClick={() => changeStatus(t.id, t.status === "Open" ? "In Progress" : "Resolved")} className="px-3 py-1 rounded border text-sm">Toggle</button>
                        </div>
                        <div className="text-xs text-slate-400">click Open to see details</div>
                      </div>
                    </motion.div>
                  ))}
                </div>
              </section>
            </div>
          )}

          {view === "create" && (
            <div className="bg-white p-6 rounded-lg shadow">
              <h2 className="text-lg font-medium mb-3">Create New Ticket</h2>
              <form onSubmit={createTicket} className="space-y-4">
                <div>
                  <label className="block text-sm font-medium mb-1">Subject</label>
                  <input value={subject} onChange={(e) => setSubject(e.target.value)} className="w-full border rounded p-2" placeholder="Short summary" />
                </div>
                <div>
                  <label className="block text-sm font-medium mb-1">Description</label>
                  <textarea value={description} onChange={(e) => setDescription(e.target.value)} className="w-full border rounded p-2" rows={5} placeholder="Describe the issue..." />
                </div>
                <div className="flex gap-4">
                  <div>
                    <label className="block text-sm font-medium mb-1">Priority</label>
                    <select value={priority} onChange={(e) => setPriority(e.target.value)} className="border rounded p-2">
                      <option>Low</option>
                      <option>Medium</option>
                      <option>High</option>
                    </select>
                  </div>

                  <div className="flex items-end">
                    <button type="submit" className="px-4 py-2 rounded bg-slate-800 text-white">Create</button>
                  </div>
                </div>
              </form>
            </div>
          )}

          {view === "detail" && selectedTicket && (
            <div className="bg-white p-6 rounded-lg shadow">
              <div className="flex items-start justify-between">
                <div>
                  <h2 className="text-lg font-semibold">{selectedTicket.subject}</h2>
                  <div className="text-sm text-slate-500">{selectedTicket.id} • {selectedTicket.createdAt}</div>
                </div>
                <div className="flex gap-2">
                  <button onClick={() => setView("list")} className="px-3 py-1 rounded border">Back</button>
                  <button onClick={() => deleteTicket(selectedTicket.id)} className="px-3 py-1 rounded border text-red-600">Delete</button>
                </div>
              </div>

              <div className="mt-4 grid md:grid-cols-3 gap-4">
                <div className="md:col-span-2">
                  <h3 className="font-medium">Description</h3>
                  <p className="mt-2 text-slate-700">{selectedTicket.description}</p>
                </div>
                <aside className="md:col-span-1 space-y-3">
                  <div className="p-3 border rounded">
                    <div className="text-sm text-slate-500">Priority</div>
                    <div className="font-medium">{selectedTicket.priority}</div>
                  </div>
                  <div className="p-3 border rounded">
                    <div className="text-sm text-slate-500">Status</div>
                    <div className="flex items-center gap-2 mt-1">
                      <select value={selectedTicket.status} onChange={(e) => changeStatus(selectedTicket.id, e.target.value)} className="border rounded p-1">
                        <option>Open</option>
                        <option>In Progress</option>
                        <option>Resolved</option>
                        <option>Closed</option>
                      </select>
                    </div>
                  </div>
                  <div className="p-3 border rounded">
                    <div className="text-sm text-slate-500">Assignee</div>
                    <div className="mt-2 flex gap-2">
                      <button onClick={() => assignTicket(selectedTicket.id, "Aishwarya")} className="px-2 py-1 border rounded text-sm">Aishwarya</button>
                      <button onClick={() => assignTicket(selectedTicket.id, "Kumar")} className="px-2 py-1 border rounded text-sm">Kumar</button>
                      <button onClick={() => assignTicket(selectedTicket.id, "Unassigned")} className="px-2 py-1 border rounded text-sm">Unassign</button>
                    </div>
                  </div>
                </aside>
              </div>
            </div>
          )}
        </main>

        <footer className="mt-8 text-center text-sm text-slate-500">
          Demo site — no backend. Export or hook up to an API for persistence.
        </footer>
      </div>
    </div>
  );
}

